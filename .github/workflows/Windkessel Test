
Artery1 = [1, 1, 0.75, 0, 5, 1, 1, 1, 1];
Artery2 = [1, 0.5, 0.5, 0, 5, 1, 1, 1, 1];
Artery3 = [1, 0.5, 0.5, 0, 5, 1, 1, 1, 1];

System = [
    Artery1;
    Artery2;
    Artery3;
];

MergingJunctions = [1,2,3;];
TerminalNodes = [2,3];
% Matrix where each entry gives a junction with the first index giving the
% parent node and the latter two giving the daughter nodes.



    
            

                 
% Finding how big the arterial system is 
[N, NumVar] = size(System);

% Initialising the data
k = 2;
rho = 1;
c = 1;



% Matrix which shows the relation between the incidence and reflection
% coefficient for a particular artery. (i,j) denotes node i in artery j.
RelationalCoefficients = zeros(k+1, N);


% Finding the relation between the coefficients at the terminal branches
% using the fact 2 windkessel model function.


% This is the code that loops through the terminal nodes to work out the
% relation

for i = 1 : length(TerminalNodes)
    node = TerminalNodes(i);
    Artery = System(node,:);
    L = Artery(1);
    R = (Artery(2)+Artery(3))/2;
    A = pi*R^2;
    Y = A / rho * c;
    CT = Artery(6);
    RT = Artery(5);
    R1 = 0.2*RT;
    R2 = RT -R1;
    
    RelationalCoefficients(1,node) = (RT * Y - 1) / (RT*Y +1); 
    
    
    for j = 2 : k+1
        Qcoeff = (1i * (j-1) + (1 + R1/R2)/R1/CT);
        Pcoeff = (1i*(j-1)/R1) + (1/R1/R2/CT);
        R = (1i * (j-1) + (1 +R1/R2)/R1/CT)/((1i*(j-1)/R1) + (1/R1/R2/CT));
        constant = (R * Y - 1) / (R*Y +1);
        RelationalCoefficients(j,node) = constant * exp(1i * (j-1)*-2* L/c);
    end 
end

% The number of junctions we are considering.
Junctions = size(MergingJunctions,1);


% Code to use the relation between the incidence and relation coefficients
% of daugther nodes to then work out the relation in the parental nodes.
% Start from the end and work our way backwards

for i = Junctions:-1:1
    Art1 = System(MergingJunctions(i,1),:);
    Art2 = System(MergingJunctions(i,2),:);
    Art3 = System(MergingJunctions(i,3),:);
    L1 = Art1(1);
    R1 = (Art1(2)+Art1(3))/2;
    A1 = pi*R1^2;
    Y1 = A1 / rho * c;
    R2 = (Art2(2)+Art2(3))/2;
    A2 = pi*R2^2;
    Y2 = A2 / rho * c;
    R3 = (Art3(2)+Art3(3))/2;
    A3 = pi*R3^2;
    Y3 = A3 / rho * c;
    for j = 1 : k+1
        alpha = RelationalCoefficients(j, MergingJunctions(i,2));
        beta = RelationalCoefficients(j, MergingJunctions(i,3));
        f2 = (1-alpha)/(1+alpha);
        f3 = (1-beta)/(1+beta);
        Quotient = Y1 + Y2*f2 + Y3 * f3;
        RelationalCoefficients(j,MergingJunctions(i,1)) =     exp(1i*-2*(j-1)*L1/c) * (Y1 - Y2*f2 - Y3*f3)/Quotient ; 
    end
end


%Incidence and reflection matrices where (i,j) denotes node i in artery j.
Incidence = zeros(k+1,N);
Reflection = zeros(k+1,N);
Incidence(:,1) = ones(k+1,1);


% We then work forwards using our relational coefficients and the values of
% the parental nodes to calculate the incidence and reflection coefficients
% of the daughter nodes.

for i = 1 : Junctions
    Art1 = System(MergingJunctions(i,1),:);
    Art2 = System(MergingJunctions(i,2),:);
    Art3 = System(MergingJunctions(i,3),:);
    L1 = Art1(1);
    for j = 1:k+1
        alpha = RelationalCoefficients(j, MergingJunctions(i,2));
        beta = RelationalCoefficients(j, MergingJunctions(i,3));
        Reflection(j,MergingJunctions(i,1)) = Incidence(j,MergingJunctions(i,1)) * RelationalCoefficients(j,MergingJunctions(i,1));
        Incidence(j,MergingJunctions(i,2)) = 1/(alpha+1) * (Incidence(j,MergingJunctions(i,1))* exp(-1i*(j-1)*L1/c) + Reflection(j,MergingJunctions(i,1))* exp(1i*(j-1)*L1/c));
        Incidence(j,MergingJunctions(i,3)) = 1/(beta+1) * (Incidence(j,MergingJunctions(i,1))* exp(-1i*(j-1)*L1/c) + Reflection(j,MergingJunctions(i,1))* exp(1i*(j-1)*L1/c));
    end
end


% Finally use the relations to find the values of them at the end

for i = 1 : length(TerminalNodes)
    node = TerminalNodes(i);
    
    for j = 1 : k+1
        Reflection(j,node) = RelationalCoefficients(j,node)* (Incidence(j, node));
    end 
end


% Code to turn real fourier constants for sin and cos into comple for e^ix.
% First index indicates whether sin or cos
% Second index highlights the fourier node
fourierCs = zeros(2,k+1);
fourierCs(1,1) = 0;
fourierCs(1,2) = 1;
fourierCs(1,3)=0.5;
fourierCs(2,3)=0.8;




complexFvals = zeros(1, k+1);
complexFvals(1)= fourierCs(1,1);
for h = 2 : k+1
    alpha = fourierCs(1,h);
    beta = fourierCs(2,h);
    complexFvals(h) = alpha - 1i *beta ;
end

% Finding what the values of the fourier constants have to be so that P(t)
% = f(t), our intial flux field at the moment.

scaledcomplexFvals = zeros(1,k+1);





for h = 1 : k+1
    scaledcomplexFvals(h) = complexFvals(h) * ( 1 / (Incidence(h,1)  + Reflection(h,1)));
end



% Creating the mesh of t vals and xvals.
xsteps = 1000;
tvals = 0:0.001:4.5;
tsteps = length(tvals);
dt = 0.001;

%Creating the tensors to hold the information on flux and pressure.
Q = zeros(N, tsteps,xsteps);
P = zeros(N, tsteps,xsteps);
forward = zeros(N,tsteps,xsteps);
backward = zeros(N,tsteps,xsteps);


% Code that goes through each artery and calculates the flux and pressure
% for each.


for i = 1: N
    Artery = System(i,:);
    L = Artery(1);
    R = (Artery(2)+Artery(3))/2;
    A = pi*R^2;
    Y = A / rho * c;
    xvals = linspace(0, L, xsteps);
    for j = 1: tsteps
        for h = 1: xsteps
            tn = tvals(j);
            xm = xvals(h);
            p=0;
            q=0;
            forward1=0;
            backward1=0;
            f = fourierVec(k,tn - xm/c,scaledcomplexFvals);
            b = fourierVec(k,tn +xm/c,scaledcomplexFvals);
            
            for m = 1 : length(f)
                q = q + Y *(Incidence(m,i)*f(m) - Reflection(m,i)*b(m));
                p = p + (Incidence(m,i)*f(m) + Reflection(m,i)*b(m));
                
            end
            for m = 1 : length(f)
                forward1 = forward1 + (Incidence(m,i)*f(m));
                backward1 = backward1 + (Reflection(m,i)*b(m));    
            end
            
            forward(i,j,h) = real(forward1);
            backward(i,j,h) = real(backward1);
            
            Q(i,j,h) = real(q);
            P(i,j,h) = real(p);
        end
    end
end

%%

% Code to test that the Windkessel model works.

TestNode = [2,3];


for i = 1:length(TestNode)
    n = TestNode(i);
    RT = System(n,5);
    CT = System(n,6);
    R1= 0.2*RT;
    R2 = RT-R1;
    q = Q(n,:,:);
    LHS = (Q(n,2:end,end)-Q(n,1:end-1,end))/dt;
    RHS = 1/R1 * (P(n,2:end,end)-P(n,1:end-1,end))/dt + P(n,1:end-1,end)/R1/R2/CT - (1+R1/R2)*Q(n,1:end-1,end)/R1/CT;
    diff = max(LHS(1)-RHS(1))
end

dt

plot(tvals,P(2,:,end))
%%

for i = 1:Junctions
    i
    max(P(MergingJunctions(i,1),:,end)-P(MergingJunctions(i,2),:,1))
    max(P(MergingJunctions(i,1),:,end)-P(MergingJunctions(i,3),:,1))
    max(Q(MergingJunctions(i,1),:,end)-(Q(MergingJunctions(i,2),:,1)+Q(MergingJunctions(i,3),:,1)))
end


%%



%%

f=@(h) exp(1i*h);

dt= 0.00001;
dx=0.1;

tvals = 0:dt:2;
xvals = 0:dx:1;
L = 1;
r;
Incidence = 1;
Reflection =1;
rho =1;
R1=1;
R2=4;
CT=1;
L =1;
r = 1;
A = pi *r^2;
Y = A/rho/c;
Qcoeff = (1i * (j-1) + (1 + R1/R2)/R1/CT);
Pcoeff = (1i*(j-1)/R1) + (1/R1/R2/CT);
RT = 5;
Qcoeff = (1i  + (1 + R1/R2)/R1/CT);
Pcoeff = (1i/R1) + (1/R1/R2/CT);

R= Qcoeff/Pcoeff; 
constant = (R * Y - 1) / (R*Y +1); 
Reflection = constant * exp(1i *-2* L/c);
Ptest = zeros(length(tvals),length(xvals));
Qtest = zeros(length(tvals),length(xvals));
normalising = 1/(Incidence +Reflection);

for i = 1: length(tvals)
    for j = 1: length(xvals)
    tn = tvals(i);
    xm = xvals(j);
    
    Ptest(i,j) = (normalising*(Incidence*f(tn-xm/c) + Reflection * f(tn+xm/c)));
    Qtest(i,j) = (normalising*Y*(Incidence*f(tn-xm/c) -Reflection*f(tn+xm/c)));
    end
end

plot(tvals,Ptest(:,1));

LHS = (Qtest(2:end,end)-Qtest(1:end-1,end))/dt;
dQ = (1i*Qtest(1:end-1,end));

dP = (1i*Ptest(1:end-1,end));
approxdP = (Ptest(2:end,end)-Ptest(1:end-1,end))/dt;

RHS = 1/R1*approxdP + Ptest(1:end-1,end)/R1/R2/CT - (1+R1/R2)*Qtest(1:end-1,end)/R1/CT;

LHStol = max(LHS-dQ);
dPtol = max(approxdP - dP);
max(LHS-RHS)


max(Ptest(:,end)- R*Qtest(:,end));
